langcode: en
status: true
dependencies:
  enforced:
    module:
      - asset
      - farm_migrate
id: farm_migrate_asset
label: 'Assets'
migration_group: farm_migrate
migration_tags:
  - 'Drupal 7'
  - 'farmOS 1.x'
class: Drupal\migrate\Plugin\Migration
field_plugin_method: null
cck_plugin_method: null
source:
  plugin: d7_asset
destination:
  plugin: 'entity:asset'
process:
  # Static map old asset types to new.
  # This only handles known asset types provided by farmOS core.
  # If the asset type is not found in this map, then the asset will be skipped.
  # Contrib farmOS modules are responsible for migrating their own asset types.
  type:
    plugin: static_map
    source: type
    map:
      animal: animal
      compost: compost
      equipment: equipment
      group: group
      planting: plant
      sensor: sensor
    bypass: FALSE
    # Hmm. This default_value is at odds with our overlapping needs.
    # - Without this default_value, the parent field migration tries to create
    #   a stub but fails at this process because the type source is not set
    #   during stub creation.
    # - With this default_value, `bypass: FALSE` has no effect. Which means
    #   all assets will be imported, and wl have a type of `stub` if their
    #   source type is not in this map.
    # - Alternatively, we could set `bypass: TRUE` and omit `default_value`,
    #   which would result in the creation of assets even if their asset type
    #   does not exist.
    #     - On one hand, this would make contrib asset type migrations easier.
    #     - On the other hand, it means our current approach of "only enable
    #       modules for the data you want to migrate" is no longer true. All
    #       data will be migrated.
    #         - Come to think of it, we're already breaking this promise by
    #           not having separate migrations for each asset type. There may
    #           be asset types in this map that were not enabled. They would
    #           still be migrated, simply because they are in this map.
    #
    # With all the above in mind, we have two choices:
    # - Accept that we can't promise "only the modules you enable will be
    #   migrated". Migrate all data regardless.
    #     - This may be OK for core asset/log types, but what about contrib? If
    #       a contrib module is not ready for 2.x, then data will be migrated
    #       for it, but it will be orphaned in the db as an unknown bundle.
    # - Take a different approach. Flip this on its head: create separate
    #   migrations for each bundle, and a general migration for common fields,
    #   but run the bundle migrations first, and fill in the common fields
    #   second, only on the entities that were imported by the bundle
    #   migrations.
    #     - How do we set the dependencies on the migrations to accomplish
    #       this?
    #     - The common fields migration can't explicitly list the bundle
    #       migrations as required dependencies, because then all the bundles
    #       would be required.
    #     - Optional dependencies could work, but only for the bundle
    #       migrations we know about in core. Contrib bundles would also need
    #       some way of ensuring that they run first.
    default_value: stub
  id:
    plugin: get
    source: id
  name:
    plugin: get
    source: name
  uid:
    -
      plugin: skip_on_empty
      method: process
      source: uid
    -
      plugin: migration_lookup
      migration: farm_migrate_user
      source: uid
  created:
    plugin: get
    source: created
  changed:
    plugin: get
    source: changed
  # Map the old archived value to both an archived timestamp and a status.
  # If the old value is 0, status is active. Otherwise, it is archived.
  archived:
    -
      plugin: skip_on_empty
      method: process
      source: archived
    -
      plugin: get
      source: archived
  status:
    plugin: static_map
    source: archived
    map:
      0: active
    default_value: archived
  notes:
    plugin: sub_process
    source: field_farm_description
    process:
      value:
        plugin: get
        source: value
      format:
        plugin: static_map
        source: format
        map:
          farm_format: default
          plain_text: plain_text
        default_value: default
  data:
    plugin: get
    source: field_farm_data
  flag:
    plugin: get
    source: field_farm_flags
  parent:
    plugin: sub_process
    source: field_farm_parent
    process:
      target_id:
        plugin: migration_lookup
        migration: farm_migrate_asset
        source: target_id
  file:
    plugin: sub_process
    source: field_farm_files
    process:
      target_id:
        plugin: migration_lookup
        migration:
          - farm_migrate_file
          - farm_migrate_file_private
        no_stub: true
        source: fid
      display: display
      description: description
  image:
    plugin: sub_process
    source: field_farm_images
    process:
      target_id:
        plugin: migration_lookup
        migration:
          - farm_migrate_file
          - farm_migrate_file_private
        no_stub: true
        source: fid
      alt: alt
      title: title
      width: width
      height: height

  # Animal specific fields.
  birthdate:
    plugin: get
    source: field_farm_date
  nickname:
    plugin: get
    source: field_farm_animal_nicknames
  sex:
    plugin: get
    source: field_farm_animal_sex
  castrated:
    plugin: get
    source: field_farm_animal_castrated

  # Equipment specific fields.
  manufacturer:
    plugin: get
    source: field_farm_manufacturer
  model:
    plugin: get
    source: field_farm_model
  serial_number:
    plugin: get
    source: field_farm_serial_number

  # Plant specific fields.
  season:
    plugin: sub_process
    source: field_farm_season
    process:
      target_id:
        plugin: migration_lookup
        migration: farm_migrate_taxonomy_term
        source: tid
migration_dependencies:
  required:
    - farm_migrate_file
    - farm_migrate_file_private
    - farm_migrate_user
  optional:
    - farm_migrate_asset
